{"version":3,"sources":["components/searchbar/searchbar.component.jsx","components/card-tile/card-tile.component.jsx","components/card-container/card-container.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","type","placeholder","this","onChange","handleChange","React","Component","CardTile","monster","name","id","CardContainer","filteredMonsters","map","key","HomePage","state","searchText","monsters","fetch","then","response","json","users","setState","filter","mons","toLowerCase","includes","e","target","value","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2OAEaA,EAAb,kDACI,WAAYC,GAAQ,uCACVA,GAFd,qDAMQ,OAAQ,2BAAOC,KAAK,SAChBC,YAAaC,KAAKH,MAAME,YACxBE,SAAUD,KAAKH,MAAMK,mBARjC,GAA+BC,IAAMC,WCAxBC,EAAb,kDAEI,WAAYR,GAAQ,uCACVA,GAHd,qDAOQ,OACA,6BACI,4BAAKG,KAAKH,MAAMS,QAAQC,MACxB,4BAAKP,KAAKH,MAAMS,QAAQE,SAVpC,GAA8BL,IAAMC,WCEvBK,EAAb,kDAEI,WAAYZ,GAAQ,uCACVA,GAHd,qDAOQ,OACI,6BACKG,KAAKH,MAAMa,iBAAiBC,KAAI,SAAAL,GAAO,OACpC,kBAAC,EAAD,CAAUM,IAAKN,EAAQE,GAAIF,QAASA,YAVxD,GAAmCH,IAAMC,WCC5BS,EAAb,kDACI,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTC,WAAY,GACZC,SAAU,CACN,CACIT,KAAM,SACNC,GAAI,MAER,CACID,KAAM,UACNC,GAAI,MAER,CACID,KAAM,QACNC,GAAI,QAhBD,EADvB,gEAuByB,IAAD,OAChBS,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACG,SAAAG,GAAK,OAAI,EAAKC,SACV,CAAEN,SAAS,GAAD,mBAAM,EAAKF,MAAME,UAAjB,YAA8BK,WA5B5D,+BAkCc,IAAD,OACDX,EAAmBV,KAAKc,MAAME,SAASO,QAAO,SAAAC,GAAI,OAAIA,EAAKjB,KAAKkB,cAAcC,SAAS,EAAKZ,MAAMC,WAAWU,kBACjH,OACI,6BACI,qCACA,kBAAC,EAAD,CAAef,iBAAkBA,IACjC,kBAAC,EAAD,CAAWZ,KAAK,SACZC,YAAY,kBACZG,aAAc,SAAAyB,GAAC,OAAI,EAAKL,SAAS,CAAEP,WAAYY,EAAEC,OAAOC,QAAS,WAC7DC,QAAQC,IAAI,EAAKjB,MAAMC,uBA3C/C,GAA8BZ,IAAMC,WCOrB4B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.7236f263.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (<input type=\"search\"\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.props.handleChange} />\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport class CardTile extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>{this.props.monster.name}</h1>\r\n            <h6>{this.props.monster.id}</h6>\r\n        </div>\r\n        )\r\n    }\r\n}","\r\nimport React from 'react';\r\nimport { CardTile } from '../card-tile/card-tile.component';\r\n\r\nexport class CardContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.filteredMonsters.map(monster =>\r\n                    <CardTile key={monster.id} monster={monster} />\r\n                )}\r\n            </div>)\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { SearchBar } from '../../components/searchbar/searchbar.component';\r\nimport { CardContainer } from '../../components/card-container/card-container.component';\r\n\r\nexport class HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchText: '',\r\n            monsters: [\r\n                {\r\n                    name: \"Zombie\",\r\n                    id: \"_1\"\r\n                },\r\n                {\r\n                    name: \"Dracula\",\r\n                    id: \"_2\"\r\n                },\r\n                {\r\n                    name: \"Mummy\",\r\n                    id: \"_3\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(\r\n                users => this.setState(\r\n                    { monsters: [...this.state.monsters, ...users] }\r\n                )\r\n            );\r\n    }\r\n\r\n\r\n    render() {\r\n        let filteredMonsters = this.state.monsters.filter(mons => mons.name.toLowerCase().includes(this.state.searchText.toLowerCase()));\r\n        return (\r\n            <div>\r\n                <h1>Hello</h1>\r\n                <CardContainer filteredMonsters={filteredMonsters}/>\r\n                <SearchBar type=\"search\"\r\n                    placeholder=\"search monsters\"\r\n                    handleChange={e => this.setState({ searchText: e.target.value }, () => {\r\n                        console.log(this.state.searchText);\r\n                    })} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { HomePage } from './pages/homepage/homepage.component';\n\nfunction App() {\n  return (\n    <div>\n      <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}